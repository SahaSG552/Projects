https://www.youtube.com/watch?v=okLgwls5q-o&t=1599
Краткий пересказ для тех, кому быстрее читать:

0. Универсальный совет: внимательно читайте документацию. У питона она подробная и исчерпывающая.

1. Хинт по версиям от Гриши: новичкам лучше всего начинать сразу с третьей версии, потому что к моменту, когда они вырастут, может ожидаться уже 4-я версия питон

2. Хинт по версиям от Миши: начинайте обучение на предпоследней версии. На сентябрь 2018 года это Python 3.6 (последняя - 3.7)

3. Используйте стандартную интерактивную оболочку Python Shell - это поможет вам лучше разобраться, как все работает изнутри, а также быстро проверять куски кода

4. Стандартные модули os и sys. Гриша советует начинать знакомство c языком не только с синтаксиса, но и с подробного чтения документации os и sys

5. Генераторы списков в питоне иногда являются единственным решением задачи, тогда как в других языках аналогичные задачи решаются проще

6. Слайсы есть во всех языках программирования, в том числе в питоне. По мнению Гриши, они обладают великой силой, т.к. дают возможность элегантно нарезать последовательности. По мнению Миши, выполнять задачи с питоном без слайсов будет крайне затруднительно.

7. Гриша о переменных: "Переменные - это не коробочка, это - наклеечка". Когда мы делаем a=b, то мы ничего не копируем, а просто на объект, который имеет стикер a, наклеиваем стикер b. То есть оба стикера указывают на один и тот же объект. А если мы хотим создать отдельный объект, то надо копировать. Это важный момент, который нужно понять с самого начала.

8. Генераторы позволяют оптимизировать расходы памяти при работе с большими объемами данных.

9. Не забывайте закрывать файлы после открытия их питоном. Иначе возможны проблемы с дальнейшим открытием этих файлов. Кроме того, вы освобождаете память, закрывая файлы правильно.

10. И напоследок о классах и функциях. В процессе обучения лучше сначала разобраться с функциями, а уже потом - с классами. По мнению Гриши, классы нужны, когда объем кода начинает расти. При этом классы сами по себе не должны быть большими, должны общаться друг с другом и ни в коем случае нельзя наследоваться

https://www.youtube.com/watch?v=WQWRDWOS-qs&list=PLv_zOGKKxVph51u_AIswuXCasZ7aZD8t3&index=121

1. Немного об Open Source. 
Участие в Open Source дает пользу обеим сторонам: разработчик учится, получает ценные рекомендации от авторов библиотеки, а библиотека получает bug fix, фичу или что-то еще. Также Open Source — это единственный способ, не присоединяясь к компании, посмотреть, как другие разработчики пишут код в продакшен. Это полезно, ведь обычно, между тем, чему учат начинающих разработчиков на курсах и тем, что реально используется в проектах, пропасть. Open Source проект прокладывает мостик между теорией и кодингом для продакшена.

2. На гитхабе есть отдельная страница http://github-help-wanted.com, на которой можно найти задачи, по которым требуется помощь. Вы откликаетесь на запись с просьбой о помощи и помогаете в меру своих возможностей. Тег "help wanted" по умолчанию добавлен в поиск. А вот если вы хотите получить объекты определенного уровня (например, простые), вы можете посмотреть все теги, кликнув по поиску и получив выпадающий список. Теги для начинающих "good first issue", "difficulty: easy".

3. Junior-friendly задания для коммерческой разработки встречаются редко. И начинающим лучше не вкатываться эти проекты, т.к. они слишком масштабны

4. HR-специалисты нужны на раннем этапе подбора разработчиков, потому что выступают фильтром по параметрам "что хочет кандидат", "что может дать ему компания", "что умеет кандидат" и затем передают на следующее собеседование проходящих по базовым условиям кандидатов. Таким образом, они экономят время сотрудников, которые проводят техническое интервью.

5. Философская мысль от Никиты Соболева: разделение на жизнь и работу мнимо, т.к. одно неотделимо от другого. Work и life в словосочетании worklife balance является частью одного целого.

6. Идея из области тайм-менеджмента от Валентина: время выполнения задачи зависит от заложенного на ее решение срока, и в этом смысле именно фактор времени детерминирует то, сколько на нее будет потрачено.

7. Идея из области нейрофизиологии от Гриши: у людей от рождения есть предрасположенность к тому, чтобы лучше или хуже обучаться каким-то навыкам. 

Мы не можем изменить эту "конфигурацию" мозга, но можем адаптироваться к ней. Если у человека нет заложенной предрасположенности для решения определенной задачи, которая обычно решается людьми с определенной "конфигурацией", то он может решить ее, адаптировавшись и применив свою "конфигурацию". И если воспринимать вдохновение как некий драйв от того, что человек решает задачу при помощи удачно подходящей для нее и присущей ему "конфигурации", то людям, которые подходящей "конфигурацией" не обладают, вдохновение не требуется, а требуется лишь отточенный набор навыков.

8. Как вы относитесь к pep572, который ввел синтаксис :=

Гриша: Положительно. Потому что, пусть это не самая простая фича, но есть скоуп задач, для которых она действительно будет полезна. Опытные разработчики с помощью таких конструкций пишут меньше кода, который приносит больше пользы, а другими разработчиками читается легче.
Никита: Отрицательно. Потому что не круто, когда в питон «запихивают» куски фортрана

9. Кто-нибудь сталкивался с фреймворком Pyramide?
Никита: Я читал отличную книгу про Pyramide, но фреймворком пользоваться буду вряд ли

10. Зачем вы обижаете PHP?
Гриша: Современный PHP не особо уступает питону. Но питон выигрывает тем, что обладает сложившейся экосистемой, доступными учебниками, сообществом и IDE. И на 2018 год оптимальным по совокупности параметров для web-разработки является Python, если только это не обусловлено конкретными причинами.

11. Оказавшись перед Гвидо, что вы ему скажете?
Никита: Зря вы приняли pep572 :D